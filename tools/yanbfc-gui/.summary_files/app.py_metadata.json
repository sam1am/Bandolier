{"hash": "6052ac5412dca1b441e155e5c1fc3f96", "summary": "Summary:\nThe given code is a Tkinter-based graphical user interface (GUI) application in Python that monitors system temperature and fan speed, allowing users to visualize this data in real-time graphs and set the speed manually or switch to automatic control. It utilizes the `subprocess` module to interact with the system's fan control utility (likely \"NoteBook FanControl\" or \"nbfc\"), the `re` module to parse the command output, and the `matplotlib` library for plotting.\n\nKey Components:\n- Temperature and fan speed readings are stored in `temperature_readings` and `fanspeed_readings`, respectively.\n- Two control modes are defined: automatic (`CONTROL_MODE_AUTO`) and manual (`CONTROL_MODE_MANUAL`), with the active mode stored in `current_control_mode`.\n- The `get_system_readings` function retrieves temperature and fan speed by running a subprocess that executes the 'nbfc status -a' command.\n- `root` is the main Tkinter window where control widgets and graphs are added.\n- Two Matplotlib graphs (`temp_fig`, `fan_speed_fig`) are created and embedded in the Tkinter application using `FigureCanvasTkAgg`.\n- `update_temperature_graph` and `update_fanspeed_graph` functions update their respective graphs with new data and limit the readings to 600 points.\n- `delayed_fan_setting` is intended to change the fan speed after some delay but currently executes the command instantly.\n- `update_readings` fetches the current system readings, updates the labels, the graphs, and reschedules itself to run at intervals set by a slider.\n- `set_fan_speed` applies a new fan speed when in manual control mode.\n- `set_auto_control` and `set_manual_control` functions are used to enable automatic or manual fan control, adjusting the GUI accordingly.\n- Corresponding Tkinter widgets (`Labels`, `Scale` sliders, and `Radiobuttons`) are created to display system readings, adjust refresh interval, and control fan speed.\n- The application starts by calling `update_readings` and enters the Tkinter main loop.\n\nFunction Documentation:\n- `get_system_readings`: Runs a subprocess to get temperature and fan speed from 'nbfc'. Returns temperature and fan speed. Handles `subprocess.CalledProcessError` exceptions.\n- `update_temperature_graph`: Updates the temperature graph using `temperature_readings`.\n- `update_fanspeed_graph`: Updates the fan speed graph using `fanspeed_readings`.\n- `delayed_fan_setting`: Executes 'nbfc' command to set fan speed to a given value.\n- `update_readings`: Fetches readings, updates labels, graphs, and schedules the next update call.\n- `set_fan_speed`: Sets the fan speed manually and triggers `delayed_fan_setting` using the value from the manual control slider.\n- `set_auto_control`: Switches the control mode to automatic and disables the manual control slider.\n- `set_manual_control`: Switches the control mode to manual and enables the manual control slider.\n\nParameters:\n- `value` in `set_fan_speed` and `delayed_fan_setting` functions is the fan speed percentage to set.\n- `refresh_seconds` in `update_readings` is the time interval for refreshing readings.\n\nNotes:\n- `CONTROL_MODE_AUTO` and `CONTROL_MODE_MANUAL` are constants representing available control modes.\n- The update intervals for graph and readings are controlled through `refresh_slider`.\n- Error handling is implemented only for the `subprocess.check_output` using a try-except block.\n- The application assumes the `nbfc` utility is available and configured with the necessary permissions (`sudo` used without password prompt).\n- Comments within the code provide additional inline documentation for specific code blocks.\n- The GUI is non-resizable with a minimum size defined, improving stability in the layout presentation."}